// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

module oled_driver_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o  [1],
  input  tlul_pkg::tl_d2h_t tl_win_i  [1],

  // To HW
  output oled_driver_reg_pkg::oled_driver_reg2hw_t reg2hw, // Write
  input  oled_driver_reg_pkg::oled_driver_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import oled_driver_reg_pkg::* ;

  localparam AW = 12;
  localparam DW = 32;
  localparam DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
  tlul_pkg::tl_d2h_t tl_socket_d2h [2];

  logic [1:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_reg_d2h;

  assign tl_win_o[0] = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i[0];

  // Create Socket_1n
  tlul_socket_1n #(
    .N          (2),
    .HReqPass   (1'b1),
    .HRspPass   (1'b1),
    .DReqPass   ({2{1'b1}}),
    .DRspPass   ({2{1'b1}}),
    .HReqDepth  (4'h0),
    .HRspDepth  (4'h0),
    .DReqDepth  ({2{4'h0}}),
    .DRspDepth  ({2{4'h0}})
  ) u_socket (
    .clk_i,
    .rst_ni,
    .tl_h_i (tl_i),
    .tl_h_o (tl_o),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer = 1;       // Default set to register

    // TODO: Can below codes be unique case () inside ?
    if (tl_i.a_address[AW-1:0] >= 2048 && tl_i.a_address[AW-1:0] < 2560) begin
      reg_steer = 0;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic cmd_disp_write_wd;
  logic cmd_disp_write_we;
  logic cmd_disp_on_wd;
  logic cmd_disp_on_we;
  logic cmd_disp_off_wd;
  logic cmd_disp_off_we;
  logic status_disp_ready_qs;
  logic status_disp_ready_re;
  logic status_on_ready_qs;
  logic status_on_ready_re;
  logic status_off_ready_qs;
  logic status_off_ready_re;

  // Register instances
  // R[cmd]: V(True)

  //   F[disp_write]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_disp_write (
    .re     (1'b0),
    .we     (cmd_disp_write_we),
    .wd     (cmd_disp_write_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.disp_write.qe),
    .q      (reg2hw.cmd.disp_write.q ),
    .qs     ()
  );


  //   F[disp_on]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_disp_on (
    .re     (1'b0),
    .we     (cmd_disp_on_we),
    .wd     (cmd_disp_on_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.disp_on.qe),
    .q      (reg2hw.cmd.disp_on.q ),
    .qs     ()
  );


  //   F[disp_off]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_disp_off (
    .re     (1'b0),
    .we     (cmd_disp_off_we),
    .wd     (cmd_disp_off_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.disp_off.qe),
    .q      (reg2hw.cmd.disp_off.q ),
    .qs     ()
  );


  // R[status]: V(True)

  //   F[disp_ready]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_disp_ready (
    .re     (status_disp_ready_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.disp_ready.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_disp_ready_qs)
  );


  //   F[on_ready]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_on_ready (
    .re     (status_on_ready_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.on_ready.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_on_ready_qs)
  );


  //   F[off_ready]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_off_ready (
    .re     (status_off_ready_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.off_ready.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_off_ready_qs)
  );




  logic [1:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == OLED_DRIVER_CMD_OFFSET);
    addr_hit[1] = (reg_addr == OLED_DRIVER_STATUS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (OLED_DRIVER_PERMIT[0] != (OLED_DRIVER_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (OLED_DRIVER_PERMIT[1] != (OLED_DRIVER_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
  end

  assign cmd_disp_write_we = addr_hit[0] & reg_we & ~wr_err;
  assign cmd_disp_write_wd = reg_wdata[0];

  assign cmd_disp_on_we = addr_hit[0] & reg_we & ~wr_err;
  assign cmd_disp_on_wd = reg_wdata[1];

  assign cmd_disp_off_we = addr_hit[0] & reg_we & ~wr_err;
  assign cmd_disp_off_wd = reg_wdata[2];

  assign status_disp_ready_re = addr_hit[1] && reg_re;

  assign status_on_ready_re = addr_hit[1] && reg_re;

  assign status_off_ready_re = addr_hit[1] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = status_disp_ready_qs;
        reg_rdata_next[1] = status_on_ready_qs;
        reg_rdata_next[2] = status_off_ready_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0, clk_i, !rst_ni)

endmodule
