// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package kmac_reg_pkg;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_done;
    struct packed {
      logic        q;
    } fifo_empty;
    struct packed {
      logic        q;
    } kmac_err;
  } kmac_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_done;
    struct packed {
      logic        q;
    } fifo_empty;
    struct packed {
      logic        q;
    } kmac_err;
  } kmac_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } kmac_done;
    struct packed {
      logic        q;
      logic        qe;
    } fifo_empty;
    struct packed {
      logic        q;
      logic        qe;
    } kmac_err;
  } kmac_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } kmac_en;
    struct packed {
      logic        q;
      logic        qe;
    } endian_swap;
    struct packed {
      logic        q;
      logic        qe;
    } digest_swap;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mode;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } data_width;
    struct packed {
      logic [7:0]  q;
      logic        qe;
    } sram_cfg;
  } kmac_reg2hw_cfg_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } start;
    struct packed {
      logic        q;
      logic        qe;
    } process;
  } kmac_reg2hw_cmd_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } kmac_reg2hw_dummy_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } data_parity;
    struct packed {
      logic        q;
      logic        qe;
    } sram_uncorrectable;
  } kmac_reg2hw_alert_test_reg_t;


  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } kmac_done;
    struct packed {
      logic        d;
      logic        de;
    } fifo_empty;
    struct packed {
      logic        d;
      logic        de;
    } kmac_err;
  } kmac_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } kmac_en;
    struct packed {
      logic        d;
    } endian_swap;
    struct packed {
      logic        d;
    } digest_swap;
    struct packed {
      logic [1:0]  d;
    } mode;
    struct packed {
      logic [1:0]  d;
    } data_width;
    struct packed {
      logic [7:0]  d;
    } sram_cfg;
  } kmac_hw2reg_cfg_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } fifo_empty;
    struct packed {
      logic        d;
    } fifo_full;
    struct packed {
      logic [4:0]  d;
    } fifo_depth;
  } kmac_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } kmac_hw2reg_dummy_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } kmac_hw2reg_err_code_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    kmac_reg2hw_intr_state_reg_t intr_state; // [73:71]
    kmac_reg2hw_intr_enable_reg_t intr_enable; // [70:68]
    kmac_reg2hw_intr_test_reg_t intr_test; // [67:62]
    kmac_reg2hw_cfg_reg_t cfg; // [61:41]
    kmac_reg2hw_cmd_reg_t cmd; // [40:37]
    kmac_reg2hw_dummy_reg_t dummy; // [36:4]
    kmac_reg2hw_alert_test_reg_t alert_test; // [3:0]
  } kmac_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    kmac_hw2reg_intr_state_reg_t intr_state; // [92:90]
    kmac_hw2reg_cfg_reg_t cfg; // [89:69]
    kmac_hw2reg_status_reg_t status; // [68:69]
    kmac_hw2reg_dummy_reg_t dummy; // [68:36]
    kmac_hw2reg_err_code_reg_t err_code; // [35:36]
  } kmac_hw2reg_t;

  // Register Address
  parameter logic [11:0] KMAC_INTR_STATE_OFFSET = 12'h 0;
  parameter logic [11:0] KMAC_INTR_ENABLE_OFFSET = 12'h 4;
  parameter logic [11:0] KMAC_INTR_TEST_OFFSET = 12'h 8;
  parameter logic [11:0] KMAC_CFG_OFFSET = 12'h c;
  parameter logic [11:0] KMAC_CMD_OFFSET = 12'h 10;
  parameter logic [11:0] KMAC_STATUS_OFFSET = 12'h 14;
  parameter logic [11:0] KMAC_DUMMY_OFFSET = 12'h 18;
  parameter logic [11:0] KMAC_ALERT_TEST_OFFSET = 12'h 1c;
  parameter logic [11:0] KMAC_ERR_CODE_OFFSET = 12'h 20;

  // Window parameter
  parameter logic [11:0] KMAC_DIGEST_OFFSET = 12'h 400;
  parameter logic [11:0] KMAC_DIGEST_SIZE   = 12'h 40;
  parameter logic [11:0] KMAC_MSG_FIFO_OFFSET = 12'h 800;
  parameter logic [11:0] KMAC_MSG_FIFO_SIZE   = 12'h 800;

  // Register Index
  typedef enum int {
    KMAC_INTR_STATE,
    KMAC_INTR_ENABLE,
    KMAC_INTR_TEST,
    KMAC_CFG,
    KMAC_CMD,
    KMAC_STATUS,
    KMAC_DUMMY,
    KMAC_ALERT_TEST,
    KMAC_ERR_CODE
  } kmac_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KMAC_PERMIT [9] = '{
    4'b 0001, // index[0] KMAC_INTR_STATE
    4'b 0001, // index[1] KMAC_INTR_ENABLE
    4'b 0001, // index[2] KMAC_INTR_TEST
    4'b 0111, // index[3] KMAC_CFG
    4'b 0001, // index[4] KMAC_CMD
    4'b 0011, // index[5] KMAC_STATUS
    4'b 1111, // index[6] KMAC_DUMMY
    4'b 0001, // index[7] KMAC_ALERT_TEST
    4'b 1111  // index[8] KMAC_ERR_CODE
  };
endpackage

