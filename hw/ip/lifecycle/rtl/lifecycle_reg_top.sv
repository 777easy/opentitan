// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module lifecycle_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output lifecycle_reg_pkg::lifecycle_reg2hw_t reg2hw, // Write
  input  lifecycle_reg_pkg::lifecycle_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import lifecycle_reg_pkg::* ;

  localparam int AW = 12;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic cmd_wd;
  logic cmd_we;
  logic status_update_done_qs;
  logic status_update_err_qs;
  logic [7:0] status_lifecycle_state_qs;
  logic [31:0] token_upper_wd;
  logic token_upper_we;
  logic [31:0] token_lower_wd;
  logic token_lower_we;
  logic [15:0] dummy_otp_qs;
  logic [15:0] dummy_otp_wd;
  logic dummy_otp_we;
  logic dummy_otp_re;
  logic [2:0] dummy_ctrl_dft_en_qs;
  logic [2:0] dummy_ctrl_dft_en_wd;
  logic dummy_ctrl_dft_en_we;
  logic [2:0] dummy_ctrl_hw_dbg_en_qs;
  logic [2:0] dummy_ctrl_hw_dbg_en_wd;
  logic dummy_ctrl_hw_dbg_en_we;
  logic [2:0] dummy_ctrl_nvm_dbg_en_qs;
  logic [2:0] dummy_ctrl_nvm_dbg_en_wd;
  logic dummy_ctrl_nvm_dbg_en_we;
  logic [2:0] dummy_ctrl_cpu_en_qs;
  logic [2:0] dummy_ctrl_cpu_en_wd;
  logic dummy_ctrl_cpu_en_we;
  logic [2:0] dummy_ctrl_provision_en_qs;
  logic [2:0] dummy_ctrl_provision_en_wd;
  logic dummy_ctrl_provision_en_we;
  logic [2:0] dummy_ctrl_keymgr_en_qs;
  logic [2:0] dummy_ctrl_keymgr_en_wd;
  logic dummy_ctrl_keymgr_en_we;

  // Register instances
  // R[cmd]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd (
    .re     (1'b0),
    .we     (cmd_we),
    .wd     (cmd_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.qe),
    .q      (reg2hw.cmd.q ),
    .qs     ()
  );


  // R[status]: V(False)

  //   F[update_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_update_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.update_done.de),
    .d      (hw2reg.status.update_done.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_update_done_qs)
  );


  //   F[update_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_update_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.update_err.de),
    .d      (hw2reg.status.update_err.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_update_err_qs)
  );


  //   F[lifecycle_state]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_status_lifecycle_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.lifecycle_state.de),
    .d      (hw2reg.status.lifecycle_state.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_lifecycle_state_qs)
  );


  // R[token_upper]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_token_upper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (token_upper_we),
    .wd     (token_upper_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.token_upper.q ),

    .qs     ()
  );


  // R[token_lower]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_token_lower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (token_lower_we),
    .wd     (token_lower_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.token_lower.q ),

    .qs     ()
  );


  // R[dummy_otp]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_dummy_otp (
    .re     (dummy_otp_re),
    .we     (dummy_otp_we),
    .wd     (dummy_otp_wd),
    .d      (hw2reg.dummy_otp.d),
    .qre    (),
    .qe     (reg2hw.dummy_otp.qe),
    .q      (reg2hw.dummy_otp.q ),
    .qs     (dummy_otp_qs)
  );


  // R[dummy_ctrl]: V(False)

  //   F[dft_en]: 2:0
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_dft_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_dft_en_we),
    .wd     (dummy_ctrl_dft_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.dft_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_dft_en_qs)
  );


  //   F[hw_dbg_en]: 6:4
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_hw_dbg_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_hw_dbg_en_we),
    .wd     (dummy_ctrl_hw_dbg_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.hw_dbg_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_hw_dbg_en_qs)
  );


  //   F[nvm_dbg_en]: 10:8
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_nvm_dbg_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_nvm_dbg_en_we),
    .wd     (dummy_ctrl_nvm_dbg_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.nvm_dbg_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_nvm_dbg_en_qs)
  );


  //   F[cpu_en]: 14:12
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_cpu_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_cpu_en_we),
    .wd     (dummy_ctrl_cpu_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.cpu_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_cpu_en_qs)
  );


  //   F[provision_en]: 18:16
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_provision_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_provision_en_we),
    .wd     (dummy_ctrl_provision_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.provision_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_provision_en_qs)
  );


  //   F[keymgr_en]: 22:20
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h5)
  ) u_dummy_ctrl_keymgr_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dummy_ctrl_keymgr_en_we),
    .wd     (dummy_ctrl_keymgr_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dummy_ctrl.keymgr_en.q ),

    // to register interface (read)
    .qs     (dummy_ctrl_keymgr_en_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == LIFECYCLE_CMD_OFFSET);
    addr_hit[1] = (reg_addr == LIFECYCLE_STATUS_OFFSET);
    addr_hit[2] = (reg_addr == LIFECYCLE_TOKEN_UPPER_OFFSET);
    addr_hit[3] = (reg_addr == LIFECYCLE_TOKEN_LOWER_OFFSET);
    addr_hit[4] = (reg_addr == LIFECYCLE_DUMMY_OTP_OFFSET);
    addr_hit[5] = (reg_addr == LIFECYCLE_DUMMY_CTRL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (LIFECYCLE_PERMIT[0] != (LIFECYCLE_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (LIFECYCLE_PERMIT[1] != (LIFECYCLE_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (LIFECYCLE_PERMIT[2] != (LIFECYCLE_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (LIFECYCLE_PERMIT[3] != (LIFECYCLE_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (LIFECYCLE_PERMIT[4] != (LIFECYCLE_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (LIFECYCLE_PERMIT[5] != (LIFECYCLE_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
  end

  assign cmd_we = addr_hit[0] & reg_we & ~wr_err;
  assign cmd_wd = reg_wdata[0];




  assign token_upper_we = addr_hit[2] & reg_we & ~wr_err;
  assign token_upper_wd = reg_wdata[31:0];

  assign token_lower_we = addr_hit[3] & reg_we & ~wr_err;
  assign token_lower_wd = reg_wdata[31:0];

  assign dummy_otp_we = addr_hit[4] & reg_we & ~wr_err;
  assign dummy_otp_wd = reg_wdata[15:0];
  assign dummy_otp_re = addr_hit[4] && reg_re;

  assign dummy_ctrl_dft_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_dft_en_wd = reg_wdata[2:0];

  assign dummy_ctrl_hw_dbg_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_hw_dbg_en_wd = reg_wdata[6:4];

  assign dummy_ctrl_nvm_dbg_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_nvm_dbg_en_wd = reg_wdata[10:8];

  assign dummy_ctrl_cpu_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_cpu_en_wd = reg_wdata[14:12];

  assign dummy_ctrl_provision_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_provision_en_wd = reg_wdata[18:16];

  assign dummy_ctrl_keymgr_en_we = addr_hit[5] & reg_we & ~wr_err;
  assign dummy_ctrl_keymgr_en_wd = reg_wdata[22:20];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = status_update_done_qs;
        reg_rdata_next[1] = status_update_err_qs;
        reg_rdata_next[23:16] = status_lifecycle_state_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[15:0] = dummy_otp_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[2:0] = dummy_ctrl_dft_en_qs;
        reg_rdata_next[6:4] = dummy_ctrl_hw_dbg_en_qs;
        reg_rdata_next[10:8] = dummy_ctrl_nvm_dbg_en_qs;
        reg_rdata_next[14:12] = dummy_ctrl_cpu_en_qs;
        reg_rdata_next[18:16] = dummy_ctrl_provision_en_qs;
        reg_rdata_next[22:20] = dummy_ctrl_keymgr_en_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
